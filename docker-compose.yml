services:
  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - WDS_SOCKET_PORT=0
      - WATCHPACK_POLLING=true
    networks:
      - gofies
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://nginx/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    volumes:
      - ./backend:/app
      - /app/node_modules
    env_file: 
      - .env
    networks:
      - gofies
    depends_on:
      mongo-init:
        condition: service_healthy
      postgres:  
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://nginx/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "5000:5000"

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - "5432:5432"
    volumes:
      - ./database/postgres/pgdata:/var/lib/postgresql/data
      - ./database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - gofies
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DATABASE} -h localhost"]
      interval: 5s
      retries: 5
      timeout: 3s

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-logs:/var/log/nginx
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - gofies
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 5s
      timeout: 5s
      retries: 5

  configsvr1:
    image: mongo:6.0
    container_name: configsvr1
    command: ["mongod", "--configsvr", "--replSet", "configReplSet", "--port", "27019", "--bind_ip_all"]
    volumes:
      - ./database/mongodb/configsvr1:/data/db
    ports:
      - "27019:27019"
    networks:
      - gofies
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27019", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  shard1:
    image: mongo:6.0
    container_name: shard1
    command: ["mongod", "--shardsvr", "--replSet", "shard1ReplSet", "--port", "27018", "--bind_ip_all"]
    volumes:
      - ./database/mongodb/shard1:/data/db
    ports:
      - "27018:27018"
    networks:
      - gofies
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  shard2:
    image: mongo:6.0
    container_name: shard2
    command: ["mongod", "--shardsvr", "--replSet", "shard2ReplSet", "--port", "27017", "--bind_ip_all"]
    volumes:
      - ./database/mongodb/shard2:/data/db
    ports:
      - "27017:27017"
    networks:
      - gofies
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27017", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongos:
    image: mongo:6.0
    container_name: mongos
    depends_on:
      - configsvr1
      - shard1
      - shard2
    command: ["mongos", "--configdb", "configReplSet/configsvr1:27019", "--bind_ip_all", "--port", "27020"]
    ports:
      - "27020:27020"
    networks:
      - gofies
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27020", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-init:
    image: mongo:6.0
    container_name: mongo-init
    depends_on:
      - configsvr1
      - shard1
      - shard2
      - mongos
    volumes:
      - ./database/mongodb/init.sh:/init.sh
    entrypoint: ["sh", "/init.sh"]
    networks:
      - gofies
    healthcheck:
      test: ["CMD", "sh", "-c", "exit 0"]
      interval: 5s
      timeout: 3s
      retries: 3

networks:
  gofies:
    driver: bridge